/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DeclarationArticlesEvaluation as PrismaDeclarationArticlesEvaluation,
} from "@prisma/client";

export class DeclarationArticlesEvaluationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeclarationArticlesEvaluationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.declarationArticlesEvaluation.count(args);
  }

  async declarationArticlesEvaluations<
    T extends Prisma.DeclarationArticlesEvaluationFindManyArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.DeclarationArticlesEvaluationFindManyArgs
    >
  ): Promise<PrismaDeclarationArticlesEvaluation[]> {
    return this.prisma.declarationArticlesEvaluation.findMany<Prisma.DeclarationArticlesEvaluationFindManyArgs>(
      args
    );
  }
  async declarationArticlesEvaluation<
    T extends Prisma.DeclarationArticlesEvaluationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.DeclarationArticlesEvaluationFindUniqueArgs
    >
  ): Promise<PrismaDeclarationArticlesEvaluation | null> {
    return this.prisma.declarationArticlesEvaluation.findUnique(args);
  }
  async createDeclarationArticlesEvaluation<
    T extends Prisma.DeclarationArticlesEvaluationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeclarationArticlesEvaluationCreateArgs>
  ): Promise<PrismaDeclarationArticlesEvaluation> {
    return this.prisma.declarationArticlesEvaluation.create<T>(args);
  }
  async updateDeclarationArticlesEvaluation<
    T extends Prisma.DeclarationArticlesEvaluationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeclarationArticlesEvaluationUpdateArgs>
  ): Promise<PrismaDeclarationArticlesEvaluation> {
    return this.prisma.declarationArticlesEvaluation.update<T>(args);
  }
  async deleteDeclarationArticlesEvaluation<
    T extends Prisma.DeclarationArticlesEvaluationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeclarationArticlesEvaluationDeleteArgs>
  ): Promise<PrismaDeclarationArticlesEvaluation> {
    return this.prisma.declarationArticlesEvaluation.delete(args);
  }
}
