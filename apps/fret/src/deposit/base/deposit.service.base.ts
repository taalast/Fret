/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Deposit as PrismaDeposit } from "@prisma/client";

export class DepositServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DepositCountArgs, "select">): Promise<number> {
    return this.prisma.deposit.count(args);
  }

  async deposits<T extends Prisma.DepositFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DepositFindManyArgs>
  ): Promise<PrismaDeposit[]> {
    return this.prisma.deposit.findMany<Prisma.DepositFindManyArgs>(args);
  }
  async deposit<T extends Prisma.DepositFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DepositFindUniqueArgs>
  ): Promise<PrismaDeposit | null> {
    return this.prisma.deposit.findUnique(args);
  }
  async createDeposit<T extends Prisma.DepositCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DepositCreateArgs>
  ): Promise<PrismaDeposit> {
    return this.prisma.deposit.create<T>(args);
  }
  async updateDeposit<T extends Prisma.DepositUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DepositUpdateArgs>
  ): Promise<PrismaDeposit> {
    return this.prisma.deposit.update<T>(args);
  }
  async deleteDeposit<T extends Prisma.DepositDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DepositDeleteArgs>
  ): Promise<PrismaDeposit> {
    return this.prisma.deposit.delete(args);
  }
}
