/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Validation as PrismaValidation } from "@prisma/client";

export class ValidationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ValidationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.validation.count(args);
  }

  async validations<T extends Prisma.ValidationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ValidationFindManyArgs>
  ): Promise<PrismaValidation[]> {
    return this.prisma.validation.findMany<Prisma.ValidationFindManyArgs>(args);
  }
  async validation<T extends Prisma.ValidationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ValidationFindUniqueArgs>
  ): Promise<PrismaValidation | null> {
    return this.prisma.validation.findUnique(args);
  }
  async createValidation<T extends Prisma.ValidationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ValidationCreateArgs>
  ): Promise<PrismaValidation> {
    return this.prisma.validation.create<T>(args);
  }
  async updateValidation<T extends Prisma.ValidationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ValidationUpdateArgs>
  ): Promise<PrismaValidation> {
    return this.prisma.validation.update<T>(args);
  }
  async deleteValidation<T extends Prisma.ValidationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ValidationDeleteArgs>
  ): Promise<PrismaValidation> {
    return this.prisma.validation.delete(args);
  }
}
