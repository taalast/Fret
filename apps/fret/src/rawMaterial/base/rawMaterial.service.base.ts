/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RawMaterial as PrismaRawMaterial } from "@prisma/client";

export class RawMaterialServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RawMaterialCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rawMaterial.count(args);
  }

  async rawMaterials<T extends Prisma.RawMaterialFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawMaterialFindManyArgs>
  ): Promise<PrismaRawMaterial[]> {
    return this.prisma.rawMaterial.findMany<Prisma.RawMaterialFindManyArgs>(
      args
    );
  }
  async rawMaterial<T extends Prisma.RawMaterialFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawMaterialFindUniqueArgs>
  ): Promise<PrismaRawMaterial | null> {
    return this.prisma.rawMaterial.findUnique(args);
  }
  async createRawMaterial<T extends Prisma.RawMaterialCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawMaterialCreateArgs>
  ): Promise<PrismaRawMaterial> {
    return this.prisma.rawMaterial.create<T>(args);
  }
  async updateRawMaterial<T extends Prisma.RawMaterialUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawMaterialUpdateArgs>
  ): Promise<PrismaRawMaterial> {
    return this.prisma.rawMaterial.update<T>(args);
  }
  async deleteRawMaterial<T extends Prisma.RawMaterialDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawMaterialDeleteArgs>
  ): Promise<PrismaRawMaterial> {
    return this.prisma.rawMaterial.delete(args);
  }
}
