/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { DepositService } from "../deposit.service";
import { DepositCreateInput } from "./DepositCreateInput";
import { DepositWhereInput } from "./DepositWhereInput";
import { DepositWhereUniqueInput } from "./DepositWhereUniqueInput";
import { DepositFindManyArgs } from "./DepositFindManyArgs";
import { DepositUpdateInput } from "./DepositUpdateInput";
import { Deposit } from "./Deposit";

export class DepositGrpcControllerBase {
  constructor(protected readonly service: DepositService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Deposit })
  @GrpcMethod("DepositService", "createDeposit")
  async createDeposit(
    @common.Body() data: DepositCreateInput
  ): Promise<Deposit> {
    return await this.service.createDeposit({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Deposit] })
  @ApiNestedQuery(DepositFindManyArgs)
  @GrpcMethod("DepositService", "deposits")
  async deposits(@common.Req() request: Request): Promise<Deposit[]> {
    const args = plainToClass(DepositFindManyArgs, request.query);
    return this.service.deposits({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Deposit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("DepositService", "deposit")
  async deposit(
    @common.Param() params: DepositWhereUniqueInput
  ): Promise<Deposit | null> {
    const result = await this.service.deposit({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Deposit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("DepositService", "updateDeposit")
  async updateDeposit(
    @common.Param() params: DepositWhereUniqueInput,
    @common.Body() data: DepositUpdateInput
  ): Promise<Deposit | null> {
    try {
      return await this.service.updateDeposit({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Deposit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("DepositService", "deleteDeposit")
  async deleteDeposit(
    @common.Param() params: DepositWhereUniqueInput
  ): Promise<Deposit | null> {
    try {
      return await this.service.deleteDeposit({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
