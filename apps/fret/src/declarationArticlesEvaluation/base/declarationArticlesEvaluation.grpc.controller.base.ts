/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { DeclarationArticlesEvaluationService } from "../declarationArticlesEvaluation.service";
import { DeclarationArticlesEvaluationCreateInput } from "./DeclarationArticlesEvaluationCreateInput";
import { DeclarationArticlesEvaluationWhereInput } from "./DeclarationArticlesEvaluationWhereInput";
import { DeclarationArticlesEvaluationWhereUniqueInput } from "./DeclarationArticlesEvaluationWhereUniqueInput";
import { DeclarationArticlesEvaluationFindManyArgs } from "./DeclarationArticlesEvaluationFindManyArgs";
import { DeclarationArticlesEvaluationUpdateInput } from "./DeclarationArticlesEvaluationUpdateInput";
import { DeclarationArticlesEvaluation } from "./DeclarationArticlesEvaluation";

export class DeclarationArticlesEvaluationGrpcControllerBase {
  constructor(
    protected readonly service: DeclarationArticlesEvaluationService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeclarationArticlesEvaluation })
  @GrpcMethod(
    "DeclarationArticlesEvaluationService",
    "createDeclarationArticlesEvaluation"
  )
  async createDeclarationArticlesEvaluation(
    @common.Body() data: DeclarationArticlesEvaluationCreateInput
  ): Promise<DeclarationArticlesEvaluation> {
    return await this.service.createDeclarationArticlesEvaluation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeclarationArticlesEvaluation] })
  @ApiNestedQuery(DeclarationArticlesEvaluationFindManyArgs)
  @GrpcMethod(
    "DeclarationArticlesEvaluationService",
    "declarationArticlesEvaluations"
  )
  async declarationArticlesEvaluations(
    @common.Req() request: Request
  ): Promise<DeclarationArticlesEvaluation[]> {
    const args = plainToClass(
      DeclarationArticlesEvaluationFindManyArgs,
      request.query
    );
    return this.service.declarationArticlesEvaluations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeclarationArticlesEvaluation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "DeclarationArticlesEvaluationService",
    "declarationArticlesEvaluation"
  )
  async declarationArticlesEvaluation(
    @common.Param() params: DeclarationArticlesEvaluationWhereUniqueInput
  ): Promise<DeclarationArticlesEvaluation | null> {
    const result = await this.service.declarationArticlesEvaluation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeclarationArticlesEvaluation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "DeclarationArticlesEvaluationService",
    "updateDeclarationArticlesEvaluation"
  )
  async updateDeclarationArticlesEvaluation(
    @common.Param() params: DeclarationArticlesEvaluationWhereUniqueInput,
    @common.Body() data: DeclarationArticlesEvaluationUpdateInput
  ): Promise<DeclarationArticlesEvaluation | null> {
    try {
      return await this.service.updateDeclarationArticlesEvaluation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeclarationArticlesEvaluation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "DeclarationArticlesEvaluationService",
    "deleteDeclarationArticlesEvaluation"
  )
  async deleteDeclarationArticlesEvaluation(
    @common.Param() params: DeclarationArticlesEvaluationWhereUniqueInput
  ): Promise<DeclarationArticlesEvaluation | null> {
    try {
      return await this.service.deleteDeclarationArticlesEvaluation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
