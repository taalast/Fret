/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { RawMaterialService } from "../rawMaterial.service";
import { RawMaterialCreateInput } from "./RawMaterialCreateInput";
import { RawMaterialWhereInput } from "./RawMaterialWhereInput";
import { RawMaterialWhereUniqueInput } from "./RawMaterialWhereUniqueInput";
import { RawMaterialFindManyArgs } from "./RawMaterialFindManyArgs";
import { RawMaterialUpdateInput } from "./RawMaterialUpdateInput";
import { RawMaterial } from "./RawMaterial";

export class RawMaterialGrpcControllerBase {
  constructor(protected readonly service: RawMaterialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RawMaterial })
  @GrpcMethod("RawMaterialService", "createRawMaterial")
  async createRawMaterial(
    @common.Body() data: RawMaterialCreateInput
  ): Promise<RawMaterial> {
    return await this.service.createRawMaterial({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RawMaterial] })
  @ApiNestedQuery(RawMaterialFindManyArgs)
  @GrpcMethod("RawMaterialService", "rawMaterials")
  async rawMaterials(@common.Req() request: Request): Promise<RawMaterial[]> {
    const args = plainToClass(RawMaterialFindManyArgs, request.query);
    return this.service.rawMaterials({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RawMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RawMaterialService", "rawMaterial")
  async rawMaterial(
    @common.Param() params: RawMaterialWhereUniqueInput
  ): Promise<RawMaterial | null> {
    const result = await this.service.rawMaterial({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RawMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RawMaterialService", "updateRawMaterial")
  async updateRawMaterial(
    @common.Param() params: RawMaterialWhereUniqueInput,
    @common.Body() data: RawMaterialUpdateInput
  ): Promise<RawMaterial | null> {
    try {
      return await this.service.updateRawMaterial({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RawMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RawMaterialService", "deleteRawMaterial")
  async deleteRawMaterial(
    @common.Param() params: RawMaterialWhereUniqueInput
  ): Promise<RawMaterial | null> {
    try {
      return await this.service.deleteRawMaterial({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
