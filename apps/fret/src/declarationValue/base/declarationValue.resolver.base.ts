/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DeclarationValue } from "./DeclarationValue";
import { DeclarationValueCountArgs } from "./DeclarationValueCountArgs";
import { DeclarationValueFindManyArgs } from "./DeclarationValueFindManyArgs";
import { DeclarationValueFindUniqueArgs } from "./DeclarationValueFindUniqueArgs";
import { CreateDeclarationValueArgs } from "./CreateDeclarationValueArgs";
import { UpdateDeclarationValueArgs } from "./UpdateDeclarationValueArgs";
import { DeleteDeclarationValueArgs } from "./DeleteDeclarationValueArgs";
import { DeclarationValueService } from "../declarationValue.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DeclarationValue)
export class DeclarationValueResolverBase {
  constructor(
    protected readonly service: DeclarationValueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "read",
    possession: "any",
  })
  async _declarationValuesMeta(
    @graphql.Args() args: DeclarationValueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DeclarationValue])
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "read",
    possession: "any",
  })
  async declarationValues(
    @graphql.Args() args: DeclarationValueFindManyArgs
  ): Promise<DeclarationValue[]> {
    return this.service.declarationValues(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DeclarationValue, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "read",
    possession: "own",
  })
  async declarationValue(
    @graphql.Args() args: DeclarationValueFindUniqueArgs
  ): Promise<DeclarationValue | null> {
    const result = await this.service.declarationValue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeclarationValue)
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "create",
    possession: "any",
  })
  async createDeclarationValue(
    @graphql.Args() args: CreateDeclarationValueArgs
  ): Promise<DeclarationValue> {
    return await this.service.createDeclarationValue({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeclarationValue)
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "update",
    possession: "any",
  })
  async updateDeclarationValue(
    @graphql.Args() args: UpdateDeclarationValueArgs
  ): Promise<DeclarationValue | null> {
    try {
      return await this.service.updateDeclarationValue({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeclarationValue)
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "delete",
    possession: "any",
  })
  async deleteDeclarationValue(
    @graphql.Args() args: DeleteDeclarationValueArgs
  ): Promise<DeclarationValue | null> {
    try {
      return await this.service.deleteDeclarationValue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
