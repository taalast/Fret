/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DeclarationEvaluation as PrismaDeclarationEvaluation,
} from "@prisma/client";

export class DeclarationEvaluationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeclarationEvaluationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.declarationEvaluation.count(args);
  }

  async declarationEvaluations<
    T extends Prisma.DeclarationEvaluationFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeclarationEvaluationFindManyArgs>
  ): Promise<PrismaDeclarationEvaluation[]> {
    return this.prisma.declarationEvaluation.findMany<Prisma.DeclarationEvaluationFindManyArgs>(
      args
    );
  }
  async declarationEvaluation<
    T extends Prisma.DeclarationEvaluationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeclarationEvaluationFindUniqueArgs>
  ): Promise<PrismaDeclarationEvaluation | null> {
    return this.prisma.declarationEvaluation.findUnique(args);
  }
  async createDeclarationEvaluation<
    T extends Prisma.DeclarationEvaluationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeclarationEvaluationCreateArgs>
  ): Promise<PrismaDeclarationEvaluation> {
    return this.prisma.declarationEvaluation.create<T>(args);
  }
  async updateDeclarationEvaluation<
    T extends Prisma.DeclarationEvaluationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeclarationEvaluationUpdateArgs>
  ): Promise<PrismaDeclarationEvaluation> {
    return this.prisma.declarationEvaluation.update<T>(args);
  }
  async deleteDeclarationEvaluation<
    T extends Prisma.DeclarationEvaluationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeclarationEvaluationDeleteArgs>
  ): Promise<PrismaDeclarationEvaluation> {
    return this.prisma.declarationEvaluation.delete(args);
  }
}
