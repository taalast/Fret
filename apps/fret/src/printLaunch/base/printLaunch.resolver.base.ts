/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PrintLaunch } from "./PrintLaunch";
import { PrintLaunchCountArgs } from "./PrintLaunchCountArgs";
import { PrintLaunchFindManyArgs } from "./PrintLaunchFindManyArgs";
import { PrintLaunchFindUniqueArgs } from "./PrintLaunchFindUniqueArgs";
import { DeletePrintLaunchArgs } from "./DeletePrintLaunchArgs";
import { PrintLaunchService } from "../printLaunch.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PrintLaunch)
export class PrintLaunchResolverBase {
  constructor(
    protected readonly service: PrintLaunchService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PrintLaunch",
    action: "read",
    possession: "any",
  })
  async _printLaunchesMeta(
    @graphql.Args() args: PrintLaunchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PrintLaunch])
  @nestAccessControl.UseRoles({
    resource: "PrintLaunch",
    action: "read",
    possession: "any",
  })
  async printLaunches(
    @graphql.Args() args: PrintLaunchFindManyArgs
  ): Promise<PrintLaunch[]> {
    return this.service.printLaunches(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PrintLaunch, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PrintLaunch",
    action: "read",
    possession: "own",
  })
  async printLaunch(
    @graphql.Args() args: PrintLaunchFindUniqueArgs
  ): Promise<PrintLaunch | null> {
    const result = await this.service.printLaunch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PrintLaunch)
  @nestAccessControl.UseRoles({
    resource: "PrintLaunch",
    action: "delete",
    possession: "any",
  })
  async deletePrintLaunch(
    @graphql.Args() args: DeletePrintLaunchArgs
  ): Promise<PrintLaunch | null> {
    try {
      return await this.service.deletePrintLaunch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
