/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DeclarationTax as PrismaDeclarationTax } from "@prisma/client";

export class DeclarationTaxServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeclarationTaxCountArgs, "select">
  ): Promise<number> {
    return this.prisma.declarationTax.count(args);
  }

  async declarationTaxes<T extends Prisma.DeclarationTaxFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationTaxFindManyArgs>
  ): Promise<PrismaDeclarationTax[]> {
    return this.prisma.declarationTax.findMany<Prisma.DeclarationTaxFindManyArgs>(
      args
    );
  }
  async declarationTax<T extends Prisma.DeclarationTaxFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationTaxFindUniqueArgs>
  ): Promise<PrismaDeclarationTax | null> {
    return this.prisma.declarationTax.findUnique(args);
  }
  async createDeclarationTax<T extends Prisma.DeclarationTaxCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationTaxCreateArgs>
  ): Promise<PrismaDeclarationTax> {
    return this.prisma.declarationTax.create<T>(args);
  }
  async updateDeclarationTax<T extends Prisma.DeclarationTaxUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationTaxUpdateArgs>
  ): Promise<PrismaDeclarationTax> {
    return this.prisma.declarationTax.update<T>(args);
  }
  async deleteDeclarationTax<T extends Prisma.DeclarationTaxDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationTaxDeleteArgs>
  ): Promise<PrismaDeclarationTax> {
    return this.prisma.declarationTax.delete(args);
  }
}
