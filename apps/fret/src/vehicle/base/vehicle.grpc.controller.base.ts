/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { VehicleService } from "../vehicle.service";
import { VehicleCreateInput } from "./VehicleCreateInput";
import { VehicleWhereInput } from "./VehicleWhereInput";
import { VehicleWhereUniqueInput } from "./VehicleWhereUniqueInput";
import { VehicleFindManyArgs } from "./VehicleFindManyArgs";
import { VehicleUpdateInput } from "./VehicleUpdateInput";
import { Vehicle } from "./Vehicle";

export class VehicleGrpcControllerBase {
  constructor(protected readonly service: VehicleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vehicle })
  @GrpcMethod("VehicleService", "createVehicle")
  async createVehicle(
    @common.Body() data: VehicleCreateInput
  ): Promise<Vehicle> {
    return await this.service.createVehicle({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Vehicle] })
  @ApiNestedQuery(VehicleFindManyArgs)
  @GrpcMethod("VehicleService", "vehicles")
  async vehicles(@common.Req() request: Request): Promise<Vehicle[]> {
    const args = plainToClass(VehicleFindManyArgs, request.query);
    return this.service.vehicles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vehicle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VehicleService", "vehicle")
  async vehicle(
    @common.Param() params: VehicleWhereUniqueInput
  ): Promise<Vehicle | null> {
    const result = await this.service.vehicle({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vehicle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VehicleService", "updateVehicle")
  async updateVehicle(
    @common.Param() params: VehicleWhereUniqueInput,
    @common.Body() data: VehicleUpdateInput
  ): Promise<Vehicle | null> {
    try {
      return await this.service.updateVehicle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vehicle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VehicleService", "deleteVehicle")
  async deleteVehicle(
    @common.Param() params: VehicleWhereUniqueInput
  ): Promise<Vehicle | null> {
    try {
      return await this.service.deleteVehicle({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
