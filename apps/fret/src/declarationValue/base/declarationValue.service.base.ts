/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DeclarationValue as PrismaDeclarationValue,
} from "@prisma/client";

export class DeclarationValueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeclarationValueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.declarationValue.count(args);
  }

  async declarationValues<T extends Prisma.DeclarationValueFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationValueFindManyArgs>
  ): Promise<PrismaDeclarationValue[]> {
    return this.prisma.declarationValue.findMany<Prisma.DeclarationValueFindManyArgs>(
      args
    );
  }
  async declarationValue<T extends Prisma.DeclarationValueFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationValueFindUniqueArgs>
  ): Promise<PrismaDeclarationValue | null> {
    return this.prisma.declarationValue.findUnique(args);
  }
  async createDeclarationValue<T extends Prisma.DeclarationValueCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationValueCreateArgs>
  ): Promise<PrismaDeclarationValue> {
    return this.prisma.declarationValue.create<T>(args);
  }
  async updateDeclarationValue<T extends Prisma.DeclarationValueUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationValueUpdateArgs>
  ): Promise<PrismaDeclarationValue> {
    return this.prisma.declarationValue.update<T>(args);
  }
  async deleteDeclarationValue<T extends Prisma.DeclarationValueDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeclarationValueDeleteArgs>
  ): Promise<PrismaDeclarationValue> {
    return this.prisma.declarationValue.delete(args);
  }
}
