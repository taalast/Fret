/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PrintLaunch as PrismaPrintLaunch } from "@prisma/client";

export class PrintLaunchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PrintLaunchCountArgs, "select">
  ): Promise<number> {
    return this.prisma.printLaunch.count(args);
  }

  async printLaunches<T extends Prisma.PrintLaunchFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrintLaunchFindManyArgs>
  ): Promise<PrismaPrintLaunch[]> {
    return this.prisma.printLaunch.findMany<Prisma.PrintLaunchFindManyArgs>(
      args
    );
  }
  async printLaunch<T extends Prisma.PrintLaunchFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrintLaunchFindUniqueArgs>
  ): Promise<PrismaPrintLaunch | null> {
    return this.prisma.printLaunch.findUnique(args);
  }
  async createPrintLaunch<T extends Prisma.PrintLaunchCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrintLaunchCreateArgs>
  ): Promise<PrismaPrintLaunch> {
    return this.prisma.printLaunch.create<T>(args);
  }
  async updatePrintLaunch<T extends Prisma.PrintLaunchUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrintLaunchUpdateArgs>
  ): Promise<PrismaPrintLaunch> {
    return this.prisma.printLaunch.update<T>(args);
  }
  async deletePrintLaunch<T extends Prisma.PrintLaunchDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrintLaunchDeleteArgs>
  ): Promise<PrismaPrintLaunch> {
    return this.prisma.printLaunch.delete(args);
  }
}
