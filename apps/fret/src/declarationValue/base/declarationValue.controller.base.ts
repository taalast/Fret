/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DeclarationValueService } from "../declarationValue.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeclarationValueCreateInput } from "./DeclarationValueCreateInput";
import { DeclarationValue } from "./DeclarationValue";
import { DeclarationValueFindManyArgs } from "./DeclarationValueFindManyArgs";
import { DeclarationValueWhereUniqueInput } from "./DeclarationValueWhereUniqueInput";
import { DeclarationValueUpdateInput } from "./DeclarationValueUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DeclarationValueControllerBase {
  constructor(
    protected readonly service: DeclarationValueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeclarationValue })
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: DeclarationValueCreateInput,
  })
  async createDeclarationValue(
    @common.Body() data: DeclarationValueCreateInput
  ): Promise<DeclarationValue> {
    return await this.service.createDeclarationValue({
      data: data,
      select: {
        buyerId: true,
        contractDate: true,
        contractId: true,
        createdAt: true,
        declarantName: true,
        declarationDate: true,
        declarationPlace: true,
        id: true,
        indirectValueBase: true,
        invoiceDate: true,
        invoiceId: true,
        officialMailDate: true,
        officialMailId: true,
        sellerId: true,
        shippingConditionCode: true,
        totalValueBase: true,
        transactionalValueBase: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DeclarationValue] })
  @ApiNestedQuery(DeclarationValueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async declarationValues(
    @common.Req() request: Request
  ): Promise<DeclarationValue[]> {
    const args = plainToClass(DeclarationValueFindManyArgs, request.query);
    return this.service.declarationValues({
      ...args,
      select: {
        buyerId: true,
        contractDate: true,
        contractId: true,
        createdAt: true,
        declarantName: true,
        declarationDate: true,
        declarationPlace: true,
        id: true,
        indirectValueBase: true,
        invoiceDate: true,
        invoiceId: true,
        officialMailDate: true,
        officialMailId: true,
        sellerId: true,
        shippingConditionCode: true,
        totalValueBase: true,
        transactionalValueBase: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeclarationValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async declarationValue(
    @common.Param() params: DeclarationValueWhereUniqueInput
  ): Promise<DeclarationValue | null> {
    const result = await this.service.declarationValue({
      where: params,
      select: {
        buyerId: true,
        contractDate: true,
        contractId: true,
        createdAt: true,
        declarantName: true,
        declarationDate: true,
        declarationPlace: true,
        id: true,
        indirectValueBase: true,
        invoiceDate: true,
        invoiceId: true,
        officialMailDate: true,
        officialMailId: true,
        sellerId: true,
        shippingConditionCode: true,
        totalValueBase: true,
        transactionalValueBase: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeclarationValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: DeclarationValueUpdateInput,
  })
  async updateDeclarationValue(
    @common.Param() params: DeclarationValueWhereUniqueInput,
    @common.Body() data: DeclarationValueUpdateInput
  ): Promise<DeclarationValue | null> {
    try {
      return await this.service.updateDeclarationValue({
        where: params,
        data: data,
        select: {
          buyerId: true,
          contractDate: true,
          contractId: true,
          createdAt: true,
          declarantName: true,
          declarationDate: true,
          declarationPlace: true,
          id: true,
          indirectValueBase: true,
          invoiceDate: true,
          invoiceId: true,
          officialMailDate: true,
          officialMailId: true,
          sellerId: true,
          shippingConditionCode: true,
          totalValueBase: true,
          transactionalValueBase: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeclarationValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DeclarationValue",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDeclarationValue(
    @common.Param() params: DeclarationValueWhereUniqueInput
  ): Promise<DeclarationValue | null> {
    try {
      return await this.service.deleteDeclarationValue({
        where: params,
        select: {
          buyerId: true,
          contractDate: true,
          contractId: true,
          createdAt: true,
          declarantName: true,
          declarationDate: true,
          declarationPlace: true,
          id: true,
          indirectValueBase: true,
          invoiceDate: true,
          invoiceId: true,
          officialMailDate: true,
          officialMailId: true,
          sellerId: true,
          shippingConditionCode: true,
          totalValueBase: true,
          transactionalValueBase: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
